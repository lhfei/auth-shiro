<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:util="http://www.springframework.org/schema/util"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
		http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.3.xsd">

	<aop:config proxy-target-class="true"></aop:config>
	
    <bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
        <property name="securityManager" ref="securityManager"/>
    </bean>
    
    <!-- Let's use some enterprise caching support for better performance.  You can replace this with any enterprise
         caching framework implementation that you like (Terracotta+Ehcache, Coherence, GigaSpaces, etc -->
    <!-- Set a net.sf.ehcache.CacheManager instance here if you already have one.  If not, a new one
         will be creaed with a default config:
         <property name="cacheManager" ref="ehCacheManager"/> -->
    <!-- If you don't have a pre-built net.sf.ehcache.CacheManager instance to inject, but you want
         a specific Ehcache configuration to be used, specify that here.  If you don't, a default
         will be used.:
    <property name="cacheManagerConfigFile" value="classpath:some/path/to/ehcache.xml"/> -->
    <bean id="cacheManager" class="org.apache.shiro.cache.ehcache.EhCacheManager">
        <property name="cacheManagerConfigFile" value="classpath:ehcache/ehcache-shiro.xml"/>
    </bean>
    
    <!-- <bean id="credentialsMatcher" class="com.jd.y.auth.serve.credential.RetryHashedCredentialsMatcher">
        <constructor-arg ref="cacheManager"/>
        <property name="hashAlgorithmName" value="${authc_password_algorithm_name}"/>
        <property name="hashIterations" value="${authc_password_hashIterations}"/>
        <property name="storedCredentialsHexEncoded" value="true"/>
    </bean> -->
    
    <bean id="credentialsMatcher" class="org.apache.shiro.authc.credential.HashedCredentialsMatcher">
        <property name="hashAlgorithmName" value="${authc.password.algorithm.name}"/>
        <property name="hashIterations" value="${authc.password.hashIterations}"/>
        <property name="storedCredentialsHexEncoded" value="true"/>
    </bean>
    
    <!-- Simulated business-tier "Manager", not Shiro related, just an example -->
    <!-- <bean id="sampleManager" class="org.apache.shiro.samples.spring.DefaultSampleManager"/> -->

    <!-- =========================================================
         Shiro Core Components - Not Spring Specific
         ========================================================= -->

    <bean id="sessionManager" class="org.apache.shiro.web.session.mgt.DefaultWebSessionManager">
        <property name="globalSessionTimeout" value="${authc.session.validate.timespan}"/>
        <property name="deleteInvalidSessions" value="true"/>
        <property name="sessionValidationSchedulerEnabled" value="true"/>
        <property name="sessionValidationScheduler" ref="sessionValidationScheduler"/>
        <property name="sessionDAO" ref="mySqlCachingSessionMapper"/>
        <property name="sessionIdCookieEnabled" value="true"/>
        <property name="sessionIdCookie" ref="sessionIdCookie"/>
    </bean>
         
    <bean id="sessionValidationScheduler" class="org.apache.shiro.session.mgt.ExecutorServiceSessionValidationScheduler">
	     <property name="interval" value="${authc.session.validate.timespan}"/>
	     <property name="sessionManager" ref="sessionManager"/>
	</bean>
	
	<!--  =========================================================
		  = Customer Realms Provider.							  =
		  ========================================================= -->
	
	<!-- Define the realm you want to use to connect to your back-end security datasource: -->
	<bean id="mySqlRealm" class="com.jd.y.auth.serve.realm.MySqlAuthorizingRealm">
		<property name="cachingEnabled" value="${authc.realm.caching.enabled}"/>
		<property name="credentialsMatcher" ref="credentialsMatcher"/>
	</bean>
	
	<bean id="passportRealm" class="com.jd.y.auth.serve.realm.PassportAuthorizingRealm"></bean>
	
	<bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
		<property name="cacheManager" ref="cacheManager"></property>
		
	    <!-- Single realm app.  If you have multiple realms, use the 'realms' property instead. -->
	    <property name="realm" ref="${authc.realm.provider}"/>
	    <property name="sessionManager" ref="sessionManager" />
		<property name="rememberMeManager" ref="rememberMeManager" />
		
	</bean>

	<bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
	    <property name="securityManager" ref="securityManager"/>
	    <property name="loginUrl" value="/login"/>
	    <!-- <property name="successUrl" value="/main"/> -->
	    <property name="unauthorizedUrl" value="/forward/unauthorized"/>
	    <!-- override these for application-specific URLs if you like: -->
	    <!-- The 'filters' property is not necessary since any declared javax.servlet.Filter bean  -->
	    <!-- defined will be automatically acquired and available via its beanName in chain        -->
	    <!-- definitions, but you can perform instance overrides or name aliases here if you like: -->
	    <property name="filters">
            <util:map>
                <entry key="authc" value-ref="formAuthenticationFilter"/>
            	<entry key="sysUser" value-ref="customerUserFilter"/>
            </util:map>
        </property>
	    <property name="filterChainDefinitions">
	        <value>
	            # some example chain definitions:
	            /admin/** = authc, roles[admin]
	            /docs/** = authc, perms[document:read]
	            # /** = authc
	            # more URL-to-FilterChain definitions here
	            
	            /favicon.ico = anon
                /logo.png = anon
                /resources/** = anon
                
                /RemoteAccountService = anon
                /HttpUserService = anon
                
                /login = authc
                /logout = logout
                /authenticated = authc
                /** = user,sysUser
	        </value>
	    </property>
	</bean>
	
	<!-- Define any javax.servlet.Filter beans you want anywhere in this application context.   -->
	<!-- They will automatically be acquired by the 'shiroFilter' bean above and made available -->
	<!-- to the 'filterChainDefinitions' property.  Or you can manually/explicitly add them     -->
	<!-- to the shiroFilter's 'filters' Map if desired. See its JavaDoc for more details.       -->
	<bean id="formAuthenticationFilter" class="com.jd.y.auth.serve.filter.StandardServerFormAuthenticationFilter">
        <property name="usernameParam" value="username"/>
        <property name="passwordParam" value="password"/>
        <property name="rememberMeParam" value="rememberMe"/>
    </bean>
    
    <bean id="customerUserFilter" class="com.jd.y.auth.serve.filter.CustomUserFilter"></bean>

	<bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor"/>
	
	<!-- For simplest integration, so that all SecurityUtils.* methods work in all cases, -->
	<!-- make the securityManager bean a static singleton.  DO NOT do this in web         -->
	<!-- applications - see the 'Web Applications' section below instead.                 -->
	<bean class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
	    <property name="staticMethod" value="org.apache.shiro.SecurityUtils.setSecurityManager"/>
	    <property name="arguments" ref="securityManager"/>
	</bean>
	
	<!-- Enable Shiro Annotations for Spring-configured beans.  Only run after -->
	<!-- the lifecycleBeanProcessor has run: -->
	<bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator" depends-on="lifecycleBeanPostProcessor"/>
	    <bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
	    <property name="securityManager" ref="securityManager"/>
	</bean>
	
	<!-- Secure Spring remoting:  Ensure any Spring Remoting method invocations -->
	<!-- can be associated with a Subject for security checks. -->
	<bean id="secureRemoteInvocationExecutor" class="org.apache.shiro.spring.remoting.SecureRemoteInvocationExecutor">
	    <property name="securityManager" ref="securityManager"/>
	</bean>
	
	<bean name="accountServiceExporter" class="org.springframework.remoting.httpinvoker.HttpInvokerServiceExporter">
	    <property name="service" ref="remoteAccountService"/>
	    <property name="serviceInterface" value="com.jd.y.auth.core.remote.AuthenticationServiceInterface"/>
	    <property name="remoteInvocationExecutor" ref="secureRemoteInvocationExecutor"/>
	</bean>
	
	<bean id="secureRemoteInvocationFactory" class="org.apache.shiro.spring.remoting.SecureRemoteInvocationFactory"/>
	
	<!-- Client Remote Service --> 
	<bean id="remoteAccountService" class="com.jd.y.auth.serve.remote.AuthenticationServiceHandler">
    </bean>
	
	<!-- Mapping configurations from URLs to request handler beans -->
	<bean id="urlMapping" class="org.springframework.web.servlet.handler.SimpleUrlHandlerMapping">
		<property name="mappings">
			<props>
				<prop key="/RemoteAccountService">accountServiceExporter</prop>
			</props>
		</property>
	</bean>
	
	<!-- ======== Cookie ======== -->
	<bean id="sessionIdCookie" class="org.apache.shiro.web.servlet.SimpleCookie">
	    <constructor-arg value="${authc.default.session.id}"/>
	    <property name="httpOnly" value="true"/>
	    <property name="maxAge" value="-1"/>
	    <property name="path" value="/"/>
	    <property name="domain" value="${authc.default.domain}"/>
	</bean>    	

	<bean id="userPinCookie" class="org.apache.shiro.web.servlet.SimpleCookie">
		<constructor-arg value="userPin" />
		<property name="httpOnly" value="true" />
		<property name="domain" value="${authc.default.domain}"/>
		<!-- 30 Days -->
		<property name="maxAge" value="${authc.cookie.remember_me.maxage}" /> 
	</bean>
	
    <bean id="rememberMeCookie" class="org.apache.shiro.web.servlet.SimpleCookie">
        <constructor-arg value="rememberMe"/>
        <property name="httpOnly" value="true"/>
        <property name="maxAge" value="${authc.cookie.remember_me.maxage}"/>
        <property name="domain" value=""/>
        <property name="path" value="/"/>
    </bean>
    
    <bean id="rememberMeManager" class="org.apache.shiro.web.mgt.CookieRememberMeManager">
        <!-- rememberMe cookie AES(128 256 512) -->
        <property name="cipherKey"
                  value="#{T(org.apache.shiro.codec.Base64).decode('b8cefgijk4lnoGAv2V1hm6FL%7Us50KTA3Kpr1sd9ag==')}"/>
        <property name="cookie" ref="rememberMeCookie"/>
    </bean>
    
    <!-- ======== Session Caching ORM ======== -->
    
    <!-- Session ID Generator -->
	<bean id="sessionIdGenerator" class="org.apache.shiro.session.mgt.eis.JavaUuidSessionIdGenerator"/>
	
	<!-- MySQL Session CRUD Handler -->
    <!-- <bean id="sessionHandlerMapper" class="com.jd.y.auth.serve.orm.mapper.SessionHandlerMapper"></bean> -->
    
    <!-- <bean id="mySqlCachingSessionMapper"
    	class="com.jd.y.auth.serve.session.mysql.MySqlCachingSessionMapper">
    	<property name="sessionMapper" ref="sessionHandlerMapper"></property>
    	<property name="activeSessionsCacheName" value="shiro-activeSessionCache"/>
        <property name="sessionIdGenerator" ref="sessionIdGenerator"/>
    </bean> -->
    
</beans>
